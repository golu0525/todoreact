{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3994a047.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TodoInput extends Component {\n  render() {\n    const { item, handleChange, handleSubmit, editItem } = this.props;\n    return (\n      <div className=\"card card-body my-3\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primary text-white\">\n                <i className=\"fas fa-book\" />\n              </div>\n            </div>\n            <input\n              type=\"text\"\n              className=\"form-control text-capitalize\"\n              placeholder=\"add a todo item\"\n              value={item}\n              onChange={handleChange}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className={\n              editItem\n                ? \"btn btn-block btn-success mt-3\"\n                : \"btn btn-block btn-primary mt-3\"\n            }\n          >\n            {editItem ? \"edit item\" : \"add item\"}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TodoItem extends Component {\n  render() {\n    const { title, handleDelete, handleEdit } = this.props;\n    return (\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n        <h6>{title}</h6>\n        <div className=\"todo-icon\">\n          <span className=\"mx-2 text-success\" onClick={handleEdit}>\n            <i className=\"fas fa-pen\" />\n          </span>\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n            <i className=\"fas fa-trash\" />\n          </span>\n        </div>\n      </li>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nexport default class TodoList extends Component {\n  render() {\n    const { items, clearList, handleDelete, handleEdit } = this.props;\n    return (\n      <ul className=\"list-group my-5\">\n        <h3 className=\"text-capitalize text-center\">todo list</h3>\n        {items.map(item => {\n          return (\n            <TodoItem\n              key={item.id}\n              title={item.title}\n              handleDelete={() => handleDelete(item.id)}\n              handleEdit={() => handleEdit(item.id)}\n            />\n          );\n        })}\n\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-block text-capitalize mt-5\"\n          onClick={clearList}\n        >\n          clear list\n        </button>\n      </ul>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false\n  };\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n\n    const updatedItems = [...this.state.items, newItem];\n\n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    const selectedItem = this.state.items.find(item => item.id === id);\n\n    console.log(selectedItem);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}